#!perl
use strict;
use warnings;

use App::trigger;

my $app = App::trigger->new;
$app->parse_options(@ARGV);
$app->run;

__END__

=encoding utf-8

=head1 NAME

ptrigger - trigger action by reading file or standard input

=head1 SYNOPSIS

    # Using configuration file
    % ptrigger --config=myptrigger some_app.log

    # Read from STDIN
    % cat some_app.log | ptrigger --config=myptrigger

    # like 'tail -f'
    % ptrigger --follow --config=myptrigger some_access.log

    # Using command line options
    % ptrigger --match '(?i:error)=red:firefox someurl' some.log

    # Specified some patterns with command line options
    % ptrigger -m 'apple:red' -m 'melon:green' -m 'lemon:yellow' fruit.log

=head1 DESCRIPTION

This command parses input and triggers the actions.

=head1 OPTIONS

You can specify the following options

=over 4

=item -c, --config

Specify configuration file.

=item -m, --match pattern[:color_attr1,...][action]

Specify match pattern, its colors, and action.

C<pattern> is just a Perl regex.

B<NOTE>: If you use colon in C<pattern>, you should use octal notation(\072)
or hexadecimal notation(\x{3a}) of B<:>.
Because colon is separator of this option.

Default color is 'reverse'. You can specify multiple color attributes
by separateing comma.

Default action is "do nothing". C<ptrigger> execs C<action> as command.

=item -f, --follow

Behave like B<tail -f>.

=item -h, --help

Display the help message.

=back

=head1 Configuration File

The configuration file is just a perl file. You can specify it
with -c, or --config command line option.

It should return HashRef. Value of Hash should be HashRef too.
It should has C<pattern> mandatory parameter and
it can have C<color> and C<action> optional parameters.

C<pattern> parameter should be string or reference of C<Regexp>.

C<color> paramter should be string or C<ArrayRef>.
C<color> parameter is passed C<Term::ANSIColor::color> function,
so you can set this parameter same as C<Term::ANSIColor>.
And C<ptrigger> supports following shorted color parameters.

    'bo'  => 'bold'
    'it'  => 'italic'
    'un'  => 'underline'
    'rev' => 'reverse'
    'bli' => 'blink'
    're'  => 'red'
    'bl'  => 'blue'
    'gr'  => 'green'
    'ye'  => 'yellow'
    'ma'  => 'magenta'
    'cy'  => 'cyan'
    'wh'  => 'white'
    'ore' => 'on_red'
    'obl' => 'on_blue'
    'ogr' => 'on_green'
    'oye' => 'on_yellow'
    'oma' => 'on_magenta'
    'ocy' => 'on_cyan'
    'owh' => 'on_white'

C<action> parameter should be C<CodeRef> or string. Matched
string is passed C<CodeRef> as first aruments, subsequent arguments
are captured strings. If you set string to C<action> parameter,
C<ptrigger> execute it as command with C<exec> function.

For example:

    +{
        # ptrigger colors string matched, then execs action string
        # as command, if input matches this pattern.
        Error => {
            pattern => qr/[\w:]Error/,
            color   => ['yellow', 'bold'],
            action  => "notify-send Error Trouble"
        },

        # ptrigger calls action coderef if input matches this pattern.
        'Server Error' => {
            pattern => qr/Server Error: (\S+)/,
            action  => sub {
                my ($matched_string, @captured_strings) = @_;

                # do something
                ...
            };
        },
    };

=head1 AUTHOR

Syohei YOSHIDA E<lt>syohex@gmail.comE<gt>

=head1 COPYRIGHT

Copyright 2012- Syohei YOSHIDA

=head1 LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
